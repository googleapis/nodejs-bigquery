// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

// @ts-ignore
import * as protos from '../../protos/protos.js';
import assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datasetserviceModule from '../src/index.js';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';

// @ts-ignore
const dirname = path.dirname(fileURLToPath(import.meta.url));
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  JSON.parse(
    fs.readFileSync(path.join(dirname, '..', '..', 'protos/protos.json'), 'utf8')
  ))

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type?.fields[field]?.resolvedType as protobuf.Type;
    }
    return type?.fields[fields[fields.length - 1]]?.defaultValue ?? null;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.DatasetServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'bigquery.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = datasetserviceModule.v2.DatasetServiceClient.servicePath;
                assert.strictEqual(servicePath, 'bigquery.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = datasetserviceModule.v2.DatasetServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'bigquery.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'bigquery.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'bigquery.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new datasetserviceModule.v2.DatasetServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'bigquery.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new datasetserviceModule.v2.DatasetServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'bigquery.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new datasetserviceModule.v2.DatasetServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = datasetserviceModule.v2.DatasetServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.datasetServiceStub, undefined);
            await client.initialize();
            assert(client.datasetServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.datasetServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.datasetServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getDataset', () => {
        it('invokes getDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.getDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.getDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.getDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDataset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IDataset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getDataset(request), expectedError);
        });
    });

    describe('insertDataset', () => {
        it('invokes insertDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.InsertDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.InsertDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.insertDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.insertDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.InsertDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.InsertDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.insertDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insertDataset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IDataset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.InsertDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.InsertDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.insertDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insertDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.insertDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes insertDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.InsertDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.InsertDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.insertDataset(request), expectedError);
        });
    });

    describe('patchDataset', () => {
        it('invokes patchDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.patchDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.patchDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.patchDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchDataset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IDataset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.patchDataset(request), expectedError);
        });
    });

    describe('updateDataset', () => {
        it('invokes updateDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.updateDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.updateDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.updateDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDataset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IDataset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateDataset(request), expectedError);
        });
    });

    describe('deleteDataset', () => {
        it('invokes deleteDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDataset(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteDataset(request), expectedError);
        });
    });

    describe('undeleteDataset', () => {
        it('invokes undeleteDataset without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UndeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.undeleteDataset = stubSimpleCall(expectedResponse);
            const [response] = await client.undeleteDataset(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteDataset without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UndeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Dataset()
            );
            client.innerApiCalls.undeleteDataset = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteDataset(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IDataset|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteDataset with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UndeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }&dataset_id=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteDataset = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.undeleteDataset(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteDataset as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteDataset with closed client', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.UndeleteDatasetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.UndeleteDatasetRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.undeleteDataset(request), expectedError);
        });
    });

    describe('listDatasets', () => {
        it('invokes listDatasets without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
            ];
            client.innerApiCalls.listDatasets = stubSimpleCall(expectedResponse);
            const [response] = await client.listDatasets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatasets without error using callback', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
            ];
            client.innerApiCalls.listDatasets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDatasets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IListFormatDataset[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatasets with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDatasets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDatasets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatasets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatasetsStream without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
            ];
            client.descriptors.page.listDatasets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDatasetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.v2.ListFormatDataset[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.v2.ListFormatDataset) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDatasets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatasets, request));
            assert(
                (client.descriptors.page.listDatasets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDatasetsStream with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatasets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDatasetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.v2.ListFormatDataset[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.v2.ListFormatDataset) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDatasets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatasets, request));
            assert(
                (client.descriptors.page.listDatasets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDatasets without error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
              generateSampleMessage(new protos.google.cloud.bigquery.v2.ListFormatDataset()),
            ];
            client.descriptors.page.listDatasets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.v2.IListFormatDataset[] = [];
            const iterable = client.listDatasetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDatasets with error', async () => {
            const client = new datasetserviceModule.v2.DatasetServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListDatasetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListDatasetsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const expectedHeaderRequestParams = `project_id=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatasets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDatasetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.v2.IListFormatDataset[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
});
