// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v2/job_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './job_service_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v2
 */
export class JobServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('bigquery');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  jobServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of JobServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new JobServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback,
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof JobServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.',
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'bigquery.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'jobs',
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.v2.JobService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')},
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.jobServiceStub) {
      return this.jobServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.v2.JobService.
    this.jobServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.v2.JobService',
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.v2.JobService,
      this._opts,
      this._providedCustomServicePath,
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const jobServiceStubMethods = [
      'cancelJob',
      'getJob',
      'insertJob',
      'deleteJob',
      'listJobs',
      'getQueryResults',
      'query',
    ];
    for (const methodName of jobServiceStubMethods) {
      const callPromise = this.jobServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        },
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback,
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.jobServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning',
      );
    }
    return 'bigquery.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning',
      );
    }
    return 'bigquery.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/devstorage.full_control',
      'https://www.googleapis.com/auth/devstorage.read_only',
      'https://www.googleapis.com/auth/devstorage.read_write',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>,
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Requests that a job be cancelled. This call will return immediately, and
   * the client will need to poll for the job status to see if the cancel
   * completed successfully. Cancelled jobs may still incur costs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the job to cancel
   * @param {string} request.jobId
   *   Required. Job ID of the job to cancel
   * @param {string} request.location
   *   The geographic location of the job. You must
   *   [specify the
   *   location](https://cloud.google.com/bigquery/docs/locations#specify_locations)
   *   to run the job for the following scenarios:
   *
   *   * If the location to run a job is not in the `us` or
   *     the `eu` multi-regional location
   *   * If the job's location is in a single region (for example,
   *     `us-central1`)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.JobCancelResponse|JobCancelResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.cancel_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_CancelJob_async
   */
  cancelJob(
    request?: protos.google.cloud.bigquery.v2.ICancelJobRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | undefined,
      {} | undefined,
    ]
  >;
  cancelJob(
    request: protos.google.cloud.bigquery.v2.ICancelJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  cancelJob(
    request: protos.google.cloud.bigquery.v2.ICancelJobRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  cancelJob(
    request?: protos.google.cloud.bigquery.v2.ICancelJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJobCancelResponse,
          protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('cancelJob request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IJobCancelResponse,
          protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .cancelJob(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IJobCancelResponse,
          protos.google.cloud.bigquery.v2.ICancelJobRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('cancelJob response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }
  /**
   * Returns information about a specific job. Job information is available for
   * a six month period after creation. Requires that you're the person who ran
   * the job, or have the Is Owner project role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested job.
   * @param {string} request.jobId
   *   Required. Job ID of the requested job.
   * @param {string} request.location
   *   The geographic location of the job. You must specify the location to run
   *   the job for the following scenarios:
   *
   *   * If the location to run a job is not in the `us` or
   *     the `eu` multi-regional location
   *   * If the job's location is in a single region (for example,
   *     `us-central1`)
   *
   *   For more information, see how to
   *   [specify
   *   locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Job|Job}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.get_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_GetJob_async
   */
  getJob(
    request?: protos.google.cloud.bigquery.v2.IGetJobRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | undefined,
      {} | undefined,
    ]
  >;
  getJob(
    request: protos.google.cloud.bigquery.v2.IGetJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  getJob(
    request: protos.google.cloud.bigquery.v2.IGetJobRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  getJob(
    request?: protos.google.cloud.bigquery.v2.IGetJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('getJob request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .getJob(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IGetJobRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('getJob response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }
  /**
   * Starts a new asynchronous job.
   *
   * This API has two different kinds of endpoint URIs, as this method supports
   * a variety of use cases.
   *
   * * The *Metadata* URI is used for most interactions, as it accepts the job
   *   configuration directly.
   * * The *Upload* URI is ONLY for the case when you're sending both a load job
   *   configuration and a data stream together.  In this case, the Upload URI
   *   accepts the job configuration and the data as two distinct multipart MIME
   *   parts.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of project that will be billed for the job.
   * @param {google.cloud.bigquery.v2.Job} request.job
   *   Jobs resource to insert.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Job|Job}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.insert_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_InsertJob_async
   */
  insertJob(
    request?: protos.google.cloud.bigquery.v2.IInsertJobRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | undefined,
      {} | undefined,
    ]
  >;
  insertJob(
    request: protos.google.cloud.bigquery.v2.IInsertJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  insertJob(
    request: protos.google.cloud.bigquery.v2.IInsertJobRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  insertJob(
    request?: protos.google.cloud.bigquery.v2.IInsertJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('insertJob request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('insertJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .insertJob(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IInsertJobRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('insertJob response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }
  /**
   * Requests the deletion of the metadata of a job. This call returns when the
   * job's metadata is deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the job for which metadata is to be deleted.
   * @param {string} request.jobId
   *   Required. Job ID of the job for which metadata is to be deleted. If this is
   *   a parent job which has child jobs, the metadata from all child jobs will be
   *   deleted as well. Direct deletion of the metadata of child jobs is not
   *   allowed.
   * @param {string} request.location
   *   The geographic location of the job. Required.
   *
   *   For more information, see how to
   *   [specify
   *   locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.delete_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_DeleteJob_async
   */
  deleteJob(
    request?: protos.google.cloud.bigquery.v2.IDeleteJobRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteJob(
    request: protos.google.cloud.bigquery.v2.IDeleteJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  deleteJob(
    request: protos.google.cloud.bigquery.v2.IDeleteJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  deleteJob(
    request?: protos.google.cloud.bigquery.v2.IDeleteJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('deleteJob request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .deleteJob(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteJobRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('deleteJob response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }
  /**
   * RPC to get the results of a query job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the query job.
   * @param {string} request.jobId
   *   Required. Job ID of the query job.
   * @param {google.protobuf.UInt64Value} request.startIndex
   *   Zero-based index of the starting row.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   Maximum number of results to read.
   * @param {google.protobuf.UInt32Value} request.timeoutMs
   *   Optional: Specifies the maximum amount of time, in milliseconds, that the
   *   client is willing to wait for the query to complete. By default, this limit
   *   is 10 seconds (10,000 milliseconds). If the query is complete, the
   *   jobComplete field in the response is true. If the query has not yet
   *   completed, jobComplete is false.
   *
   *   You can request a longer timeout period in the timeoutMs field.  However,
   *   the call is not guaranteed to wait for the specified timeout; it typically
   *   returns after around 200 seconds (200,000 milliseconds), even if the query
   *   is not complete.
   *
   *   If jobComplete is false, you can continue to wait for the query to complete
   *   by calling the getQueryResults method until the jobComplete field in the
   *   getQueryResults response is true.
   * @param {string} request.location
   *   The geographic location of the job. You must specify the location to run
   *   the job for the following scenarios:
   *
   *   * If the location to run a job is not in the `us` or
   *     the `eu` multi-regional location
   *   * If the job's location is in a single region (for example,
   *   `us-central1`)
   *
   *   For more information, see how to
   *   [specify
   *   locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
   * @param {google.cloud.bigquery.v2.DataFormatOptions} [request.formatOptions]
   *   Optional. Output format adjustments.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.GetQueryResultsResponse|GetQueryResultsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.get_query_results.js</caption>
   * region_tag:bigquery_v2_generated_JobService_GetQueryResults_async
   */
  getQueryResults(
    request?: protos.google.cloud.bigquery.v2.IGetQueryResultsRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
      protos.google.cloud.bigquery.v2.IGetQueryResultsRequest | undefined,
      {} | undefined,
    ]
  >;
  getQueryResults(
    request: protos.google.cloud.bigquery.v2.IGetQueryResultsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
      | protos.google.cloud.bigquery.v2.IGetQueryResultsRequest
      | null
      | undefined,
      {} | null | undefined
    >,
  ): void;
  getQueryResults(
    request: protos.google.cloud.bigquery.v2.IGetQueryResultsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
      | protos.google.cloud.bigquery.v2.IGetQueryResultsRequest
      | null
      | undefined,
      {} | null | undefined
    >,
  ): void;
  getQueryResults(
    request?: protos.google.cloud.bigquery.v2.IGetQueryResultsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
          | protos.google.cloud.bigquery.v2.IGetQueryResultsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
      | protos.google.cloud.bigquery.v2.IGetQueryResultsRequest
      | null
      | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
      protos.google.cloud.bigquery.v2.IGetQueryResultsRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        job_id: request.jobId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('getQueryResults request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
          | protos.google.cloud.bigquery.v2.IGetQueryResultsRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getQueryResults response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .getQueryResults(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IGetQueryResultsResponse,
          protos.google.cloud.bigquery.v2.IGetQueryResultsRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('getQueryResults response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }
  /**
   * Runs a BigQuery SQL query synchronously and returns query results if the
   * query completes within a specified timeout.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the query request.
   * @param {google.cloud.bigquery.v2.QueryRequest} request.queryRequest
   *   The query request body.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.QueryResponse|QueryResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.query.js</caption>
   * region_tag:bigquery_v2_generated_JobService_Query_async
   */
  query(
    request?: protos.google.cloud.bigquery.v2.IPostQueryRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IQueryResponse,
      protos.google.cloud.bigquery.v2.IPostQueryRequest | undefined,
      {} | undefined,
    ]
  >;
  query(
    request: protos.google.cloud.bigquery.v2.IPostQueryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IQueryResponse,
      protos.google.cloud.bigquery.v2.IPostQueryRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  query(
    request: protos.google.cloud.bigquery.v2.IPostQueryRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IQueryResponse,
      protos.google.cloud.bigquery.v2.IPostQueryRequest | null | undefined,
      {} | null | undefined
    >,
  ): void;
  query(
    request?: protos.google.cloud.bigquery.v2.IPostQueryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IQueryResponse,
          protos.google.cloud.bigquery.v2.IPostQueryRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IQueryResponse,
      protos.google.cloud.bigquery.v2.IPostQueryRequest | null | undefined,
      {} | null | undefined
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IQueryResponse,
      protos.google.cloud.bigquery.v2.IPostQueryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('query request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IQueryResponse,
          protos.google.cloud.bigquery.v2.IPostQueryRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('query response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .query(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IQueryResponse,
          protos.google.cloud.bigquery.v2.IPostQueryRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('query response %j', response);
          return [response, options, rawResponse];
        },
      )
      .catch((error: any) => {
        if (
          error &&
          'statusDetails' in error &&
          error.statusDetails instanceof Array
        ) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(
            jsonProtos,
          ) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(
            error.statusDetails,
            protos,
          );
        }
        throw error;
      });
  }

  /**
   * Lists all jobs that you started in the specified project. Job information
   * is available for a six month period after creation. The job list is sorted
   * in reverse chronological order, by job creation time. Requires the Can View
   * project role, or the Is Owner project role if you set the allUsers
   * property.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listJobs(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options?: CallOptions,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IListFormatJob[],
      protos.google.cloud.bigquery.v2.IListJobsRequest | null,
      protos.google.cloud.bigquery.v2.IJobList,
    ]
  >;
  listJobs(
    request: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListJobsRequest,
      protos.google.cloud.bigquery.v2.IJobList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatJob
    >,
  ): void;
  listJobs(
    request: protos.google.cloud.bigquery.v2.IListJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListJobsRequest,
      protos.google.cloud.bigquery.v2.IJobList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatJob
    >,
  ): void;
  listJobs(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListJobsRequest,
          protos.google.cloud.bigquery.v2.IJobList | null | undefined,
          protos.google.cloud.bigquery.v2.IListFormatJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListJobsRequest,
      protos.google.cloud.bigquery.v2.IJobList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatJob
    >,
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IListFormatJob[],
      protos.google.cloud.bigquery.v2.IListJobsRequest | null,
      protos.google.cloud.bigquery.v2.IJobList,
    ]
  > | void {
    request = request || {};
    // Converts number to Unit32 or Int32 value for non-compliant APIs.
    if (request.maxResults && typeof request.maxResults === 'number') {
      const maxResultsObject = {value: request.maxResults};
      request.maxResults = maxResultsObject;
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    const wrappedCallback:
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListJobsRequest,
          protos.google.cloud.bigquery.v2.IJobList | null | undefined,
          protos.google.cloud.bigquery.v2.IListFormatJob
        >
      | undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listJobs request %j', request);
    return this.innerApiCalls
      .listJobs(request, options, wrappedCallback)
      ?.then(
        ([response, input, output]: [
          protos.google.cloud.bigquery.v2.IListFormatJob[],
          protos.google.cloud.bigquery.v2.IListJobsRequest | null,
          protos.google.cloud.bigquery.v2.IJobList,
        ]) => {
          this._log.info('listJobs values %j', response);
          return [response, input, output];
        },
      );
  }

  /**
   * Equivalent to `listJobs`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listJobsStream(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options?: CallOptions,
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listJobs stream %j', request);
    return this.descriptors.page.listJobs.createStream(
      this.innerApiCalls.listJobs as GaxCall,
      request,
      callSettings,
    );
  }

  /**
   * Equivalent to `listJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.list_jobs.js</caption>
   * region_tag:bigquery_v2_generated_JobService_ListJobs_async
   */
  listJobsAsync(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options?: CallOptions,
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IListFormatJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
      });
    const defaultCallSettings = this._defaults['listJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listJobs iterate %j', request);
    return this.descriptors.page.listJobs.asyncIterate(
      this.innerApiCalls['listJobs'] as GaxCall,
      request as {},
      callSettings,
    ) as AsyncIterable<protos.google.cloud.bigquery.v2.IListFormatJob>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.jobServiceStub && !this._terminated) {
      return this.jobServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
