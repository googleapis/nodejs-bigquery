// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v2/routine_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './routine_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  RoutineService provides management access to BigQuery routines.
 * @class
 * @memberof v2
 */
export class RoutineServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('bigquery');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  routineServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of RoutineServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new RoutineServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof RoutineServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'bigquery.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
    if (!opts) {
      opts = {fallback: true};
    } else {
      opts.fallback = opts.fallback ?? true;
    }
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listRoutines: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'routines'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.v2.RoutineService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.routineServiceStub) {
      return this.routineServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.v2.RoutineService.
    this.routineServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.v2.RoutineService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.v2.RoutineService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const routineServiceStubMethods = [
      'getRoutine',
      'insertRoutine',
      'updateRoutine',
      'patchRoutine',
      'deleteRoutine',
      'listRoutines',
    ];
    for (const methodName of routineServiceStubMethods) {
      const callPromise = this.routineServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.routineServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'bigquery.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'bigquery.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified routine resource by routine ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested routine
   * @param {string} request.datasetId
   *   Required. Dataset ID of the requested routine
   * @param {string} request.routineId
   *   Required. Routine ID of the requested routine
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.get_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_GetRoutine_async
   */
  getRoutine(
    request?: protos.google.cloud.bigquery.v2.IGetRoutineRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | undefined,
      {} | undefined,
    ]
  >;
  getRoutine(
    request: protos.google.cloud.bigquery.v2.IGetRoutineRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRoutine(
    request: protos.google.cloud.bigquery.v2.IGetRoutineRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRoutine(
    request?: protos.google.cloud.bigquery.v2.IGetRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
        routine_id: request.routineId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('getRoutine request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getRoutine response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .getRoutine(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IGetRoutineRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('getRoutine response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Creates a new routine in the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the new routine
   * @param {string} request.datasetId
   *   Required. Dataset ID of the new routine
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource to insert
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.insert_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_InsertRoutine_async
   */
  insertRoutine(
    request?: protos.google.cloud.bigquery.v2.IInsertRoutineRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | undefined,
      {} | undefined,
    ]
  >;
  insertRoutine(
    request: protos.google.cloud.bigquery.v2.IInsertRoutineRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  insertRoutine(
    request: protos.google.cloud.bigquery.v2.IInsertRoutineRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  insertRoutine(
    request?: protos.google.cloud.bigquery.v2.IInsertRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IInsertRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('insertRoutine request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IInsertRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('insertRoutine response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .insertRoutine(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IInsertRoutineRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('insertRoutine response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Updates information in an existing routine. The update method replaces the
   * entire Routine resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to update
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to update
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource which will replace the specified routine
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.update_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_UpdateRoutine_async
   */
  updateRoutine(
    request?: protos.google.cloud.bigquery.v2.IUpdateRoutineRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | undefined,
      {} | undefined,
    ]
  >;
  updateRoutine(
    request: protos.google.cloud.bigquery.v2.IUpdateRoutineRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRoutine(
    request: protos.google.cloud.bigquery.v2.IUpdateRoutineRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateRoutine(
    request?: protos.google.cloud.bigquery.v2.IUpdateRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IUpdateRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
        routine_id: request.routineId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('updateRoutine request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IUpdateRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateRoutine response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .updateRoutine(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('updateRoutine response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Patches information in an existing routine. The patch method does a partial
   * update to an existing Routine resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to update
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to update
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource which will be used to partially
   *   update the specified routine
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   Only the Routine fields in the field mask are updated
   *   by the given routine. Repeated routine fields will be fully replaced
   *   if contained in the field mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.patch_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_PatchRoutine_async
   */
  patchRoutine(
    request?: protos.google.cloud.bigquery.v2.IPatchRoutineRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | undefined,
      {} | undefined,
    ]
  >;
  patchRoutine(
    request: protos.google.cloud.bigquery.v2.IPatchRoutineRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  patchRoutine(
    request: protos.google.cloud.bigquery.v2.IPatchRoutineRequest,
    callback: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  patchRoutine(
    request?: protos.google.cloud.bigquery.v2.IPatchRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IPatchRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('patchRoutine request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IPatchRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('patchRoutine response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .patchRoutine(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IPatchRoutineRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('patchRoutine response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Deletes the routine specified by routineId from the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to delete
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to delete
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to delete
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.delete_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_DeleteRoutine_async
   */
  deleteRoutine(
    request?: protos.google.cloud.bigquery.v2.IDeleteRoutineRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteRoutine(
    request: protos.google.cloud.bigquery.v2.IDeleteRoutineRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRoutine(
    request: protos.google.cloud.bigquery.v2.IDeleteRoutineRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRoutine(
    request?: protos.google.cloud.bigquery.v2.IDeleteRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
        routine_id: request.routineId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('deleteRoutine request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteRoutine response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .deleteRoutine(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('deleteRoutine response %j', response);
          return [response, options, rawResponse];
        }
      );
  }

  /**
   * Lists all routines in the specified dataset. Requires the READER dataset
   * role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRoutinesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRoutines(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine[],
      protos.google.cloud.bigquery.v2.IListRoutinesRequest | null,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse,
    ]
  >;
  listRoutines(
    request: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListRoutinesRequest,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse | null | undefined,
      protos.google.cloud.bigquery.v2.IRoutine
    >
  ): void;
  listRoutines(
    request: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListRoutinesRequest,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse | null | undefined,
      protos.google.cloud.bigquery.v2.IRoutine
    >
  ): void;
  listRoutines(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListRoutinesRequest,
          | protos.google.cloud.bigquery.v2.IListRoutinesResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.v2.IRoutine
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListRoutinesRequest,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse | null | undefined,
      protos.google.cloud.bigquery.v2.IRoutine
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine[],
      protos.google.cloud.bigquery.v2.IListRoutinesRequest | null,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse,
    ]
  > | void {
    request = request || {};
    // Converts number to Unit32 or Int32 value for non-compliant APIs.
    if (request.maxResults && typeof request.maxResults === 'number') {
      const maxResultsObject = {value: request.maxResults};
      request.maxResults = maxResultsObject;
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    const wrappedCallback:
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListRoutinesRequest,
          | protos.google.cloud.bigquery.v2.IListRoutinesResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.v2.IRoutine
        >
      | undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listRoutines values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listRoutines request %j', request);
    return this.innerApiCalls
      .listRoutines(request, options, wrappedCallback)
      ?.then(
        ([response, input, output]: [
          protos.google.cloud.bigquery.v2.IRoutine[],
          protos.google.cloud.bigquery.v2.IListRoutinesRequest | null,
          protos.google.cloud.bigquery.v2.IListRoutinesResponse,
        ]) => {
          this._log.info('listRoutines values %j', response);
          return [response, input, output];
        }
      );
  }

  /**
   * Equivalent to `listRoutines`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRoutinesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRoutinesStream(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
      });
    const defaultCallSettings = this._defaults['listRoutines'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listRoutines stream %j', request);
    return this.descriptors.page.listRoutines.createStream(
      this.innerApiCalls.listRoutines as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRoutines`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.Routine|Routine}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.list_routines.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_ListRoutines_async
   */
  listRoutinesAsync(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IRoutine> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        project_id: request.projectId ?? '',
        dataset_id: request.datasetId ?? '',
      });
    const defaultCallSettings = this._defaults['listRoutines'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listRoutines iterate %j', request);
    return this.descriptors.page.listRoutines.asyncIterate(
      this.innerApiCalls['listRoutines'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.v2.IRoutine>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.routineServiceStub && !this._terminated) {
      return this.routineServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
