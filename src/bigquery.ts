// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated **
// ** All changes to this file may be overwritten. **

import {
  protos,
  DatasetServiceClient,
  TableServiceClient,
  JobServiceClient,
  ModelServiceClient,
  RoutineServiceClient,
  RowAccessPolicyServiceClient,
} from '.';
import type * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  ClientOptions,
  PaginationCallback,
} from 'google-gax';
import {Transform} from 'stream';

/**
 * Options passed to the underlying client.
 *
 * @param {object} [options] - The configuration object.
 * The options accepted by the constructor are described in detail
 * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
 * The common options are:
 * @param {object} [options.credentials] - Credentials object.
 * @param {string} [options.credentials.client_email]
 * @param {string} [options.credentials.private_key]
 * @param {string} [options.email] - Account email address. Required when
 *     using a .pem or .p12 keyFilename.
 * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
 *     .p12 key downloaded from the Google Developers Console. If you provide
 *     a path to a JSON file, the projectId option below is not necessary.
 *     NOTE: .pem and .p12 require you to specify options.email as well.
 * @param {number} [options.port] - The port on which to connect to
 *     the remote host.
 * @param {string} [options.projectId] - The project ID from the Google
 *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
 *     the environment variable GCLOUD_PROJECT for your project ID. If your
 *     app is running in an environment which supports
 *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
 *     your project ID will be detected automatically.
 * @param {string} [options.apiEndpoint] - The domain name of the
 *     API remote host.
 * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
 *     Follows the structure of {@link gapicConfig}.
 * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
 *     For more information, please check the
 *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
 * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
 *     need to avoid loading the default gRPC version and want to use the fallback
 *     HTTP implementation. Load only fallback version and pass it to the constructor:
 *     ```
 *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
 *     const client = new DatasetServiceClient({fallback: true}, gax);
 *     ```
 */
export type SubClientOptions = {
  opts?: ClientOptions;
  gaxInstance?: typeof gax | typeof gax.fallback;
};

export type BigQueryClientOptions = {
  datasetClient?: DatasetServiceClient;
  tableClient?: TableServiceClient;
  jobClient?: JobServiceClient;
  modelClient?: ModelServiceClient;
  routineClient?: RoutineServiceClient;
  rowAccessPolicyClient?: RowAccessPolicyServiceClient;
};

export class BigQueryClient {
  datasetClient: DatasetServiceClient;
  tableClient: TableServiceClient;
  jobClient: JobServiceClient;
  modelClient: ModelServiceClient;
  routineClient: RoutineServiceClient;
  rowAccessPolicyClient: RowAccessPolicyServiceClient;

  /**
   * @param {object} [BigQueryClientOptions] - Enables user to instantiate clients separately and use those as the subclients.
   * @param {object} [SubClientOptions] - These options will be shared across subclients.
   * To have sub-clients with different options, instantiate each client separately.
   */
  constructor(
    options?: BigQueryClientOptions,
    subClientOptions?: SubClientOptions
  ) {
    this.datasetClient =
      options?.datasetClient ??
      new DatasetServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
    this.tableClient =
      options?.tableClient ??
      new TableServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
    this.jobClient =
      options?.jobClient ??
      new JobServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
    this.modelClient =
      options?.modelClient ??
      new ModelServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
    this.routineClient =
      options?.routineClient ??
      new RoutineServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
    this.rowAccessPolicyClient =
      options?.rowAccessPolicyClient ??
      new RowAccessPolicyServiceClient(
        subClientOptions?.opts,
        subClientOptions?.gaxInstance
      );
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the dataset specified by datasetID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested dataset
   * @param {string} request.datasetId
   *   Required. Dataset ID of the requested dataset
   * @param {google.cloud.bigquery.v2.GetDatasetRequest.DatasetView} [request.datasetView]
   *   Optional. Specifies the view that determines which dataset information is
   *   returned. By default, metadata and ACL information are returned.
   * @param {number} [request.accessPolicyVersion]
   *   Optional. The version of the access policy schema to fetch.
   *   Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   *   rejected.
   *
   *   Requests for conditional access policy binding in datasets must specify
   *   version 3. Dataset with no conditional role bindings in access policy may
   *   specify any valid value or leave the field unset.
   *
   *   This field will be mapped to [IAM Policy version]
   *   (https://cloud.google.com/iam/docs/policies#versions) and will be used to
   *   fetch policy from IAM.
   *
   *   If unset or if 0 or 1 value is used for dataset with conditional bindings,
   *   access entry with condition will have role string appended by
   *   'withcond' string followed by a hash value. For example :
   *   {
   *     "access": [
   *        {
   *           "role":
   *           "roles/bigquery.dataViewer_with_conditionalbinding_7a34awqsda",
   *           "userByEmail": "user@example.com",
   *        }
   *     ]
   *   }
   *   Please refer https://cloud.google.com/iam/docs/troubleshooting-withcond for
   *   more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Dataset|Dataset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.get_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_GetDataset_async
   */
  getDataset(
    request?: protos.google.cloud.bigquery.v2.IGetDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IDataset,
          protos.google.cloud.bigquery.v2.IGetDatasetRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IGetDatasetRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IGetDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.getDataset(request, options);
    }
    return this.datasetClient.getDataset(request, options, callback);
  }

  /**
   * Creates a new empty dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the new dataset
   * @param {google.cloud.bigquery.v2.Dataset} request.dataset
   *   Required. Datasets resource to use for the new dataset
   * @param {number} [request.accessPolicyVersion]
   *   Optional. The version of the provided access policy schema.
   *   Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   *   rejected.
   *
   *   This version refers to the schema version of the access policy and not the
   *   version of access policy. This field's value can be equal or more
   *   than the access policy schema provided in the request.
   *   For example,
   *     * Requests with conditional access policy binding in datasets must
   *     specify
   *       version 3.
   *     * But dataset with no conditional role bindings in access policy
   *       may specify any valid value or leave the field unset.
   *   If unset or if 0 or 1 value is used for dataset with conditional
   *   bindings, request will be rejected.
   *
   *   This field will be mapped to IAM Policy version
   *   (https://cloud.google.com/iam/docs/policies#versions) and will be used to
   *   set policy in IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Dataset|Dataset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.insert_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_InsertDataset_async
   */
  insertDataset(
    request?: protos.google.cloud.bigquery.v2.IInsertDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IDataset,
          | protos.google.cloud.bigquery.v2.IInsertDatasetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IInsertDatasetRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IInsertDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.insertDataset(request, options);
    }
    return this.datasetClient.insertDataset(request, options, callback);
  }

  /**
   * Updates information in an existing dataset. The update method replaces the
   * entire dataset resource, whereas the patch method only replaces fields that
   * are provided in the submitted dataset resource.
   * This method supports RFC5789 patch semantics.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the dataset being updated
   * @param {string} request.datasetId
   *   Required. Dataset ID of the dataset being updated
   * @param {google.cloud.bigquery.v2.Dataset} request.dataset
   *   Required. Datasets resource which will replace or patch the specified
   *   dataset.
   * @param {google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.UpdateMode} [request.updateMode]
   *   Optional. Specifies the fields of dataset that update/patch operation is
   *   targeting By default, both metadata and ACL fields are updated.
   * @param {number} [request.accessPolicyVersion]
   *   Optional. The version of the provided access policy schema.
   *   Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   *   rejected.
   *
   *   This version refers to the schema version of the access policy and not the
   *   version of access policy. This field's value can be equal or more
   *   than the access policy schema provided in the request.
   *   For example,
   *     * Operations updating conditional access policy binding in datasets must
   *     specify
   *       version 3. Some of the operations are :
   *         -  Adding a new access policy entry with condition.
   *         -  Removing an access policy entry with condition.
   *         -  Updating an access policy entry with condition.
   *     * But dataset with no conditional role bindings in access policy
   *       may specify any valid value or leave the field unset.
   *   If unset or if 0 or 1 value is used for dataset with conditional
   *   bindings, request will be rejected.
   *
   *   This field will be mapped to IAM Policy version
   *   (https://cloud.google.com/iam/docs/policies#versions) and will be used to
   *   set policy in IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Dataset|Dataset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.patch_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_PatchDataset_async
   */
  patchDataset(
    request?: protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IDataset,
          | protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IDataset,
      | protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.patchDataset(request, options);
    }
    return this.datasetClient.patchDataset(request, options, callback);
  }

  /**
   * Updates information in an existing dataset. The update method replaces the
   * entire dataset resource, whereas the patch method only replaces fields that
   * are provided in the submitted dataset resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the dataset being updated
   * @param {string} request.datasetId
   *   Required. Dataset ID of the dataset being updated
   * @param {google.cloud.bigquery.v2.Dataset} request.dataset
   *   Required. Datasets resource which will replace or patch the specified
   *   dataset.
   * @param {google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.UpdateMode} [request.updateMode]
   *   Optional. Specifies the fields of dataset that update/patch operation is
   *   targeting By default, both metadata and ACL fields are updated.
   * @param {number} [request.accessPolicyVersion]
   *   Optional. The version of the provided access policy schema.
   *   Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   *   rejected.
   *
   *   This version refers to the schema version of the access policy and not the
   *   version of access policy. This field's value can be equal or more
   *   than the access policy schema provided in the request.
   *   For example,
   *     * Operations updating conditional access policy binding in datasets must
   *     specify
   *       version 3. Some of the operations are :
   *         -  Adding a new access policy entry with condition.
   *         -  Removing an access policy entry with condition.
   *         -  Updating an access policy entry with condition.
   *     * But dataset with no conditional role bindings in access policy
   *       may specify any valid value or leave the field unset.
   *   If unset or if 0 or 1 value is used for dataset with conditional
   *   bindings, request will be rejected.
   *
   *   This field will be mapped to IAM Policy version
   *   (https://cloud.google.com/iam/docs/policies#versions) and will be used to
   *   set policy in IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Dataset|Dataset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.update_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_UpdateDataset_async
   */
  updateDataset(
    request?: protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IDataset,
          | protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IDataset,
      | protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IUpdateOrPatchDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.updateDataset(request, options);
    }
    return this.datasetClient.updateDataset(request, options, callback);
  }

  /**
   * Deletes the dataset specified by the datasetId value. Before you can delete
   * a dataset, you must delete all its tables, either manually or by specifying
   * deleteContents. Immediately after deletion, you can create another dataset
   * with the same name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the dataset being deleted
   * @param {string} request.datasetId
   *   Required. Dataset ID of dataset being deleted
   * @param {boolean} request.deleteContents
   *   If True, delete all the tables in the dataset.
   *   If False and the dataset contains tables, the request will fail.
   *   Default is False
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.delete_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_DeleteDataset_async
   */
  deleteDataset(
    request?: protos.google.cloud.bigquery.v2.IDeleteDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteDatasetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteDatasetRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.deleteDataset(request, options);
    }
    return this.datasetClient.deleteDataset(request, options, callback);
  }

  /**
   * Undeletes a dataset which is within time travel window based on datasetId.
   * If a time is specified, the dataset version deleted at that time is
   * undeleted, else the last live version is undeleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the dataset to be undeleted
   * @param {string} request.datasetId
   *   Required. Dataset ID of dataset being deleted
   * @param {google.protobuf.Timestamp} [request.deletionTime]
   *   Optional. The exact time when the dataset was deleted. If not specified,
   *   the most recently deleted version is undeleted. Undeleting a dataset
   *   using deletion time is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Dataset|Dataset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.undelete_dataset.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_UndeleteDataset_async
   */
  undeleteDataset(
    request?: protos.google.cloud.bigquery.v2.IUndeleteDatasetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IDataset,
          | protos.google.cloud.bigquery.v2.IUndeleteDatasetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IDataset,
      | protos.google.cloud.bigquery.v2.IUndeleteDatasetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IDataset,
      protos.google.cloud.bigquery.v2.IUndeleteDatasetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.undeleteDataset(request, options);
    }
    return this.datasetClient.undeleteDataset(request, options, callback);
  }

  /**
   * Lists all datasets in the specified project to which the user has been
   * granted the READER dataset role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the datasets to be listed
   * @param {google.protobuf.UInt32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {boolean} request.all
   *   Whether to list all datasets, including hidden ones
   * @param {string} request.filter
   *   An expression for filtering the results of the request by label.
   *   The syntax is `labels.<name>[:<value>]`.
   *   Multiple filters can be AND-ed together by connecting with a space.
   *   Example: `labels.department:receiving labels.active`.
   *   See [Filtering datasets using
   *   labels](https://cloud.google.com/bigquery/docs/filtering-labels#filtering_datasets_using_labels)
   *   for details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.ListFormatDataset|ListFormatDataset}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDatasetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDatasets(
    request?: protos.google.cloud.bigquery.v2.IListDatasetsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListDatasetsRequest,
          protos.google.cloud.bigquery.v2.IDatasetList | null | undefined,
          protos.google.cloud.bigquery.v2.IListFormatDataset
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListDatasetsRequest,
      protos.google.cloud.bigquery.v2.IDatasetList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatDataset
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IListFormatDataset[],
      protos.google.cloud.bigquery.v2.IListDatasetsRequest | null,
      protos.google.cloud.bigquery.v2.IDatasetList,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.datasetClient.listDatasets(request, options);
    }
    return this.datasetClient.listDatasets(request, options, callback);
  }

  /**
   * Equivalent to `listDatasets`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the datasets to be listed
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {boolean} request.all
   *   Whether to list all datasets, including hidden ones
   * @param {string} request.filter
   *   An expression for filtering the results of the request by label.
   *   The syntax is `labels.<name>[:<value>]`.
   *   Multiple filters can be AND-ed together by connecting with a space.
   *   Example: `labels.department:receiving labels.active`.
   *   See [Filtering datasets using
   *   labels](https://cloud.google.com/bigquery/docs/filtering-labels#filtering_datasets_using_labels)
   *   for details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.ListFormatDataset|ListFormatDataset} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDatasetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDatasetsStream(
    request?: protos.google.cloud.bigquery.v2.IListDatasetsRequest,
    options?: CallOptions
  ): Transform {
    return this.datasetClient.listDatasetsStream(request, options);
  }

  /**
   * Equivalent to `listDatasets`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the datasets to be listed
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {boolean} request.all
   *   Whether to list all datasets, including hidden ones
   * @param {string} request.filter
   *   An expression for filtering the results of the request by label.
   *   The syntax is `labels.<name>[:<value>]`.
   *   Multiple filters can be AND-ed together by connecting with a space.
   *   Example: `labels.department:receiving labels.active`.
   *   See [Filtering datasets using
   *   labels](https://cloud.google.com/bigquery/docs/filtering-labels#filtering_datasets_using_labels)
   *   for details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.ListFormatDataset|ListFormatDataset}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dataset_service.list_datasets.js</caption>
   * region_tag:bigquery_v2_generated_DatasetService_ListDatasets_async
   */
  listDatasetsAsync(
    request?: protos.google.cloud.bigquery.v2.IListDatasetsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IListFormatDataset> {
    return this.datasetClient.listDatasetsAsync(request, options);
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified table resource by table ID.
   * This method does not return the data in the table, it only returns the
   * table resource, which describes the structure of this table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested table
   * @param {string} request.datasetId
   *   Required. Dataset ID of the requested table
   * @param {string} request.tableId
   *   Required. Table ID of the requested table
   * @param {string} request.selectedFields
   *   List of table schema fields to return (comma-separated).
   *   If unspecified, all fields are returned.
   *   A fieldMask cannot be used here because the fields will automatically be
   *   converted from camelCase to snake_case and the conversion will fail if
   *   there are underscores. Since these are fields in BigQuery table schemas,
   *   underscores are allowed.
   * @param {google.cloud.bigquery.v2.GetTableRequest.TableMetadataView} [request.view]
   *   Optional. Specifies the view that determines which table information is
   *   returned. By default, basic table information and storage statistics
   *   (STORAGE_STATS) are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Table|Table}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.get_table.js</caption>
   * region_tag:bigquery_v2_generated_TableService_GetTable_async
   */
  getTable(
    request?: protos.google.cloud.bigquery.v2.IGetTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.ITable,
          protos.google.cloud.bigquery.v2.IGetTableRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IGetTableRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.getTable(request, options);
    }
    return this.tableClient.getTable(request, options, callback);
  }

  /**
   * Creates a new, empty table in the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the new table
   * @param {string} request.datasetId
   *   Required. Dataset ID of the new table
   * @param {google.cloud.bigquery.v2.Table} request.table
   *   Required. A tables resource to insert
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Table|Table}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.insert_table.js</caption>
   * region_tag:bigquery_v2_generated_TableService_InsertTable_async
   */
  insertTable(
    request?: protos.google.cloud.bigquery.v2.IInsertTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.ITable,
          | protos.google.cloud.bigquery.v2.IInsertTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IInsertTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IInsertTableRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.insertTable(request, options);
    }
    return this.tableClient.insertTable(request, options, callback);
  }

  /**
   * Updates information in an existing table. The update method replaces the
   * entire table resource, whereas the patch method only replaces fields that
   * are provided in the submitted table resource.
   * This method supports RFC5789 patch semantics.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to update
   * @param {string} request.tableId
   *   Required. Table ID of the table to update
   * @param {google.cloud.bigquery.v2.Table} request.table
   *   Required. A tables resource which will replace or patch the specified table
   * @param {boolean} [request.autodetectSchema]
   *   Optional. When true will autodetect schema, else will keep original schema.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Table|Table}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.patch_table.js</caption>
   * region_tag:bigquery_v2_generated_TableService_PatchTable_async
   */
  patchTable(
    request?: protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.ITable,
          | protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.ITable,
      | protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.patchTable(request, options);
    }
    return this.tableClient.patchTable(request, options, callback);
  }

  /**
   * Updates information in an existing table. The update method replaces the
   * entire Table resource, whereas the patch method only replaces fields that
   * are provided in the submitted Table resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to update
   * @param {string} request.tableId
   *   Required. Table ID of the table to update
   * @param {google.cloud.bigquery.v2.Table} request.table
   *   Required. A tables resource which will replace or patch the specified table
   * @param {boolean} [request.autodetectSchema]
   *   Optional. When true will autodetect schema, else will keep original schema.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Table|Table}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.update_table.js</caption>
   * region_tag:bigquery_v2_generated_TableService_UpdateTable_async
   */
  updateTable(
    request?: protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.ITable,
          | protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.ITable,
      | protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.ITable,
      protos.google.cloud.bigquery.v2.IUpdateOrPatchTableRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.updateTable(request, options);
    }
    return this.tableClient.updateTable(request, options, callback);
  }

  /**
   * Deletes the table specified by tableId from the dataset.
   * If the table contains data, all the data will be deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to delete
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to delete
   * @param {string} request.tableId
   *   Required. Table ID of the table to delete
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.delete_table.js</caption>
   * region_tag:bigquery_v2_generated_TableService_DeleteTable_async
   */
  deleteTable(
    request?: protos.google.cloud.bigquery.v2.IDeleteTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteTableRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.deleteTable(request, options);
    }
    return this.tableClient.deleteTable(request, options, callback);
  }

  /**
   * Lists all tables in the specified dataset. Requires the READER dataset
   * role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the tables to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the tables to list
   * @param {google.protobuf.UInt32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.ListFormatTable|ListFormatTable}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTablesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTables(
    request?: protos.google.cloud.bigquery.v2.IListTablesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListTablesRequest,
          protos.google.cloud.bigquery.v2.ITableList | null | undefined,
          protos.google.cloud.bigquery.v2.IListFormatTable
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListTablesRequest,
      protos.google.cloud.bigquery.v2.ITableList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatTable
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IListFormatTable[],
      protos.google.cloud.bigquery.v2.IListTablesRequest | null,
      protos.google.cloud.bigquery.v2.ITableList,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.tableClient.listTables(request, options);
    }
    return this.tableClient.listTables(request, options, callback);
  }

  /**
   * Equivalent to `listTables`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the tables to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the tables to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.ListFormatTable|ListFormatTable} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTablesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTablesStream(
    request?: protos.google.cloud.bigquery.v2.IListTablesRequest,
    options?: CallOptions
  ): Transform {
    return this.tableClient.listTablesStream(request, options);
  }

  /**
   * Equivalent to `listTables`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the tables to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the tables to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.ListFormatTable|ListFormatTable}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/table_service.list_tables.js</caption>
   * region_tag:bigquery_v2_generated_TableService_ListTables_async
   */
  listTablesAsync(
    request?: protos.google.cloud.bigquery.v2.IListTablesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IListFormatTable> {
    return this.tableClient.listTablesAsync(request, options);
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Requests that a job be cancelled. This call will return immediately, and
   * the client will need to poll for the job status to see if the cancel
   * completed successfully. Cancelled jobs may still incur costs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the job to cancel
   * @param {string} request.jobId
   *   Required. Job ID of the job to cancel
   * @param {string} request.location
   *   The geographic location of the job. You must
   *   [specify the
   *   location](https://cloud.google.com/bigquery/docs/locations#specify_locations)
   *   to run the job for the following scenarios:
   *
   *   * If the location to run a job is not in the `us` or
   *     the `eu` multi-regional location
   *   * If the job's location is in a single region (for example,
   *     `us-central1`)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.JobCancelResponse|JobCancelResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.cancel_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_CancelJob_async
   */
  cancelJob(
    request?: protos.google.cloud.bigquery.v2.ICancelJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJobCancelResponse,
          protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJobCancelResponse,
      protos.google.cloud.bigquery.v2.ICancelJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.jobClient.cancelJob(request, options);
    }
    return this.jobClient.cancelJob(request, options, callback);
  }

  /**
   * Returns information about a specific job. Job information is available for
   * a six month period after creation. Requires that you're the person who ran
   * the job, or have the Is Owner project role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested job.
   * @param {string} request.jobId
   *   Required. Job ID of the requested job.
   * @param {string} request.location
   *   The geographic location of the job. You must specify the location to run
   *   the job for the following scenarios:
   *
   *   * If the location to run a job is not in the `us` or
   *     the `eu` multi-regional location
   *   * If the job's location is in a single region (for example,
   *     `us-central1`)
   *
   *   For more information, see how to
   *   [specify
   *   locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Job|Job}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.get_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_GetJob_async
   */
  getJob(
    request?: protos.google.cloud.bigquery.v2.IGetJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IGetJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.jobClient.getJob(request, options);
    }
    return this.jobClient.getJob(request, options, callback);
  }

  /**
   * Starts a new asynchronous job.
   *
   * This API has two different kinds of endpoint URIs, as this method supports
   * a variety of use cases.
   *
   * * The *Metadata* URI is used for most interactions, as it accepts the job
   *   configuration directly.
   * * The *Upload* URI is ONLY for the case when you're sending both a load job
   *   configuration and a data stream together.  In this case, the Upload URI
   *   accepts the job configuration and the data as two distinct multipart MIME
   *   parts.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of project that will be billed for the job.
   * @param {google.cloud.bigquery.v2.Job} request.job
   *   Jobs resource to insert.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Job|Job}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.insert_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_InsertJob_async
   */
  insertJob(
    request?: protos.google.cloud.bigquery.v2.IInsertJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IJob,
          protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IJob,
      protos.google.cloud.bigquery.v2.IInsertJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.jobClient.insertJob(request, options);
    }
    return this.jobClient.insertJob(request, options, callback);
  }

  /**
   * Requests the deletion of the metadata of a job. This call returns when the
   * job's metadata is deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the job for which metadata is to be deleted.
   * @param {string} request.jobId
   *   Required. Job ID of the job for which metadata is to be deleted. If this is
   *   a parent job which has child jobs, the metadata from all child jobs will be
   *   deleted as well. Direct deletion of the metadata of child jobs is not
   *   allowed.
   * @param {string} request.location
   *   The geographic location of the job. Required.
   *
   *   For more information, see how to
   *   [specify
   *   locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.delete_job.js</caption>
   * region_tag:bigquery_v2_generated_JobService_DeleteJob_async
   */
  deleteJob(
    request?: protos.google.cloud.bigquery.v2.IDeleteJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.jobClient.deleteJob(request, options);
    }
    return this.jobClient.deleteJob(request, options, callback);
  }

  /**
   * Lists all jobs that you started in the specified project. Job information
   * is available for a six month period after creation. The job list is sorted
   * in reverse chronological order, by job creation time. Requires the Can View
   * project role, or the Is Owner project role if you set the allUsers
   * property.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listJobs(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListJobsRequest,
          protos.google.cloud.bigquery.v2.IJobList | null | undefined,
          protos.google.cloud.bigquery.v2.IListFormatJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListJobsRequest,
      protos.google.cloud.bigquery.v2.IJobList | null | undefined,
      protos.google.cloud.bigquery.v2.IListFormatJob
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IListFormatJob[],
      protos.google.cloud.bigquery.v2.IListJobsRequest | null,
      protos.google.cloud.bigquery.v2.IJobList,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.jobClient.listJobs(request, options);
    }
    return this.jobClient.listJobs(request, options, callback);
  }

  /**
   * Equivalent to `listJobs`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listJobsStream(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options?: CallOptions
  ): Transform {
    return this.jobClient.listJobsStream(request, options);
  }

  /**
   * Equivalent to `listJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Project ID of the jobs to list.
   * @param {boolean} request.allUsers
   *   Whether to display jobs owned by all users in the project. Default False.
   * @param {google.protobuf.Int32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {number} request.minCreationTime
   *   Min value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created after or at this timestamp are returned.
   * @param {google.protobuf.UInt64Value} request.maxCreationTime
   *   Max value for job creation time, in milliseconds since the POSIX epoch.
   *   If set, only jobs created before or at this timestamp are returned.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {google.cloud.bigquery.v2.ListJobsRequest.Projection} request.projection
   *   Restrict information returned to a set of selected fields
   * @param {number[]} request.stateFilter
   *   Filter for job state
   * @param {string} request.parentJobId
   *   If set, show only child jobs of the specified parent.  Otherwise, show all
   *   top-level jobs.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.ListFormatJob|ListFormatJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/job_service.list_jobs.js</caption>
   * region_tag:bigquery_v2_generated_JobService_ListJobs_async
   */
  listJobsAsync(
    request?: protos.google.cloud.bigquery.v2.IListJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IListFormatJob> {
    return this.jobClient.listJobsAsync(request, options);
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified model resource by model ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested model.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the requested model.
   * @param {string} request.modelId
   *   Required. Model ID of the requested model.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Model|Model}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/model_service.get_model.js</caption>
   * region_tag:bigquery_v2_generated_ModelService_GetModel_async
   */
  getModel(
    request?: protos.google.cloud.bigquery.v2.IGetModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IGetModelRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IModel,
      protos.google.cloud.bigquery.v2.IGetModelRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IModel,
      protos.google.cloud.bigquery.v2.IGetModelRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.modelClient.getModel(request, options);
    }
    return this.modelClient.getModel(request, options, callback);
  }

  /**
   * Patch specific fields in the specified model.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the model to patch.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the model to patch.
   * @param {string} request.modelId
   *   Required. Model ID of the model to patch.
   * @param {google.cloud.bigquery.v2.Model} request.model
   *   Required. Patched model.
   *   Follows RFC5789 patch semantics. Missing fields are not updated.
   *   To clear a field, explicitly set to default value.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Model|Model}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/model_service.patch_model.js</caption>
   * region_tag:bigquery_v2_generated_ModelService_PatchModel_async
   */
  patchModel(
    request?: protos.google.cloud.bigquery.v2.IPatchModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IPatchModelRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IModel,
      protos.google.cloud.bigquery.v2.IPatchModelRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IModel,
      protos.google.cloud.bigquery.v2.IPatchModelRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.modelClient.patchModel(request, options);
    }
    return this.modelClient.patchModel(request, options, callback);
  }

  /**
   * Deletes the model specified by modelId from the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the model to delete.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the model to delete.
   * @param {string} request.modelId
   *   Required. Model ID of the model to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/model_service.delete_model.js</caption>
   * region_tag:bigquery_v2_generated_ModelService_DeleteModel_async
   */
  deleteModel(
    request?: protos.google.cloud.bigquery.v2.IDeleteModelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteModelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteModelRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteModelRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.modelClient.deleteModel(request, options);
    }
    return this.modelClient.deleteModel(request, options, callback);
  }

  /**
   * Lists all models in the specified dataset. Requires the READER dataset
   * role. After retrieving the list of models, you can get information about a
   * particular model by calling the models.get method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the models to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the models to list.
   * @param {google.protobuf.UInt32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.Model|Model}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listModelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listModels(
    request?: protos.google.cloud.bigquery.v2.IListModelsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListModelsRequest,
          | protos.google.cloud.bigquery.v2.IListModelsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.v2.IModel
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListModelsRequest,
      protos.google.cloud.bigquery.v2.IListModelsResponse | null | undefined,
      protos.google.cloud.bigquery.v2.IModel
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IModel[],
      protos.google.cloud.bigquery.v2.IListModelsRequest | null,
      protos.google.cloud.bigquery.v2.IListModelsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.modelClient.listModels(request, options);
    }
    return this.modelClient.listModels(request, options, callback);
  }

  /**
   * Equivalent to `listModels`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the models to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the models to list.
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.Model|Model} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listModelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listModelsStream(
    request?: protos.google.cloud.bigquery.v2.IListModelsRequest,
    options?: CallOptions
  ): Transform {
    return this.modelClient.listModelsStream(request, options);
  }

  /**
   * Equivalent to `listModels`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the models to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the models to list.
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call to request the next page of
   *   results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.Model|Model}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/model_service.list_models.js</caption>
   * region_tag:bigquery_v2_generated_ModelService_ListModels_async
   */
  listModelsAsync(
    request?: protos.google.cloud.bigquery.v2.IListModelsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IModel> {
    return this.modelClient.listModelsAsync(request, options);
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified routine resource by routine ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the requested routine
   * @param {string} request.datasetId
   *   Required. Dataset ID of the requested routine
   * @param {string} request.routineId
   *   Required. Routine ID of the requested routine
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.get_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_GetRoutine_async
   */
  getRoutine(
    request?: protos.google.cloud.bigquery.v2.IGetRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IGetRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.getRoutine(request, options);
    }
    return this.routineClient.getRoutine(request, options, callback);
  }

  /**
   * Creates a new routine in the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the new routine
   * @param {string} request.datasetId
   *   Required. Dataset ID of the new routine
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource to insert
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.insert_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_InsertRoutine_async
   */
  insertRoutine(
    request?: protos.google.cloud.bigquery.v2.IInsertRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IInsertRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IInsertRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.insertRoutine(request, options);
    }
    return this.routineClient.insertRoutine(request, options, callback);
  }

  /**
   * Updates information in an existing routine. The update method replaces the
   * entire Routine resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to update
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to update
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource which will replace the specified routine
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.update_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_UpdateRoutine_async
   */
  updateRoutine(
    request?: protos.google.cloud.bigquery.v2.IUpdateRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IUpdateRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IUpdateRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.updateRoutine(request, options);
    }
    return this.routineClient.updateRoutine(request, options, callback);
  }

  /**
   * Patches information in an existing routine. The patch method does a partial
   * update to an existing Routine resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to update
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to update
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to update
   * @param {google.cloud.bigquery.v2.Routine} request.routine
   *   Required. A routine resource which will be used to partially
   *   update the specified routine
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   Only the Routine fields in the field mask are updated
   *   by the given routine. Repeated routine fields will be fully replaced
   *   if contained in the field mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.patch_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_PatchRoutine_async
   */
  patchRoutine(
    request?: protos.google.cloud.bigquery.v2.IPatchRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRoutine,
          | protos.google.cloud.bigquery.v2.IPatchRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine,
      protos.google.cloud.bigquery.v2.IPatchRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.patchRoutine(request, options);
    }
    return this.routineClient.patchRoutine(request, options, callback);
  }

  /**
   * Deletes the routine specified by routineId from the dataset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routine to delete
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routine to delete
   * @param {string} request.routineId
   *   Required. Routine ID of the routine to delete
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.delete_routine.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_DeleteRoutine_async
   */
  deleteRoutine(
    request?: protos.google.cloud.bigquery.v2.IDeleteRoutineRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteRoutineRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRoutineRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.deleteRoutine(request, options);
    }
    return this.routineClient.deleteRoutine(request, options, callback);
  }

  /**
   * Lists all routines in the specified dataset. Requires the READER dataset
   * role.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value| number } request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.Routine|Routine}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRoutinesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRoutines(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListRoutinesRequest,
          | protos.google.cloud.bigquery.v2.IListRoutinesResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.v2.IRoutine
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListRoutinesRequest,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse | null | undefined,
      protos.google.cloud.bigquery.v2.IRoutine
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRoutine[],
      protos.google.cloud.bigquery.v2.IListRoutinesRequest | null,
      protos.google.cloud.bigquery.v2.IListRoutinesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.routineClient.listRoutines(request, options);
    }
    return this.routineClient.listRoutines(request, options, callback);
  }

  /**
   * Equivalent to `listRoutines`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.Routine|Routine} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRoutinesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRoutinesStream(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options?: CallOptions
  ): Transform {
    return this.routineClient.listRoutinesStream(request, options);
  }

  /**
   * Equivalent to `listRoutines`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the routines to list
   * @param {string} request.datasetId
   *   Required. Dataset ID of the routines to list
   * @param {google.protobuf.UInt32Value} request.maxResults
   *   The maximum number of results to return in a single response page.
   *   Leverage the page tokens to iterate through the entire collection.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results
   * @param {string} request.filter
   *   If set, then only the Routines matching this filter are returned.
   *   The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   *   is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.Routine|Routine}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/routine_service.list_routines.js</caption>
   * region_tag:bigquery_v2_generated_RoutineService_ListRoutines_async
   */
  listRoutinesAsync(
    request?: protos.google.cloud.bigquery.v2.IListRoutinesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IRoutine> {
    return this.routineClient.listRoutinesAsync(request, options);
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified row access policy by policy ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to get the row access policy.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to get the row access policy.
   * @param {string} request.tableId
   *   Required. Table ID of the table to get the row access policy.
   * @param {string} request.policyId
   *   Required. Policy ID of the row access policy.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/row_access_policy_service.get_row_access_policy.js</caption>
   * region_tag:bigquery_v2_generated_RowAccessPolicyService_GetRowAccessPolicy_async
   */
  getRowAccessPolicy(
    request?: protos.google.cloud.bigquery.v2.IGetRowAccessPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRowAccessPolicy,
          | protos.google.cloud.bigquery.v2.IGetRowAccessPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRowAccessPolicy,
      | protos.google.cloud.bigquery.v2.IGetRowAccessPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRowAccessPolicy,
      protos.google.cloud.bigquery.v2.IGetRowAccessPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.rowAccessPolicyClient.getRowAccessPolicy(request, options);
    }
    return this.rowAccessPolicyClient.getRowAccessPolicy(
      request,
      options,
      callback
    );
  }

  /**
   * Updates a row access policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to get the row access policy.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to get the row access policy.
   * @param {string} request.tableId
   *   Required. Table ID of the table to get the row access policy.
   * @param {string} request.policyId
   *   Required. Policy ID of the row access policy.
   * @param {google.cloud.bigquery.v2.RowAccessPolicy} request.rowAccessPolicy
   *   Required. The row access policy to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/row_access_policy_service.update_row_access_policy.js</caption>
   * region_tag:bigquery_v2_generated_RowAccessPolicyService_UpdateRowAccessPolicy_async
   */
  updateRowAccessPolicy(
    request?: protos.google.cloud.bigquery.v2.IUpdateRowAccessPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.v2.IRowAccessPolicy,
          | protos.google.cloud.bigquery.v2.IUpdateRowAccessPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.v2.IRowAccessPolicy,
      | protos.google.cloud.bigquery.v2.IUpdateRowAccessPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRowAccessPolicy,
      protos.google.cloud.bigquery.v2.IUpdateRowAccessPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.rowAccessPolicyClient.updateRowAccessPolicy(request, options);
    }
    return this.rowAccessPolicyClient.updateRowAccessPolicy(
      request,
      options,
      callback
    );
  }

  /**
   * Deletes a row access policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the table to delete the row access policy.
   * @param {string} request.datasetId
   *   Required. Dataset ID of the table to delete the row access policy.
   * @param {string} request.tableId
   *   Required. Table ID of the table to delete the row access policy.
   * @param {string} request.policyId
   *   Required. Policy ID of the row access policy.
   * @param {boolean} request.force
   *   If set to true, it deletes the row access policy even if it's the last row
   *   access policy on the table and the deletion will widen the access rather
   *   narrowing it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/row_access_policy_service.delete_row_access_policy.js</caption>
   * region_tag:bigquery_v2_generated_RowAccessPolicyService_DeleteRowAccessPolicy_async
   */
  deleteRowAccessPolicy(
    request?: protos.google.cloud.bigquery.v2.IDeleteRowAccessPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.v2.IDeleteRowAccessPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.v2.IDeleteRowAccessPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.bigquery.v2.IDeleteRowAccessPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.rowAccessPolicyClient.deleteRowAccessPolicy(request, options);
    }
    return this.rowAccessPolicyClient.deleteRowAccessPolicy(
      request,
      options,
      callback
    );
  }

  /**
   * Lists all row access policies on the specified table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the row access policies to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of row access policies to list.
   * @param {string} request.tableId
   *   Required. Table ID of the table to list row access policies.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response page. Leverage
   *   the page tokens to iterate through the entire collection.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRowAccessPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRowAccessPolicies(
    request?: protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest,
          | protos.google.cloud.bigquery.v2.IListRowAccessPoliciesResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.v2.IRowAccessPolicy
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest,
      | protos.google.cloud.bigquery.v2.IListRowAccessPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.v2.IRowAccessPolicy
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.v2.IRowAccessPolicy[],
      protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest | null,
      protos.google.cloud.bigquery.v2.IListRowAccessPoliciesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    if (callback === undefined) {
      return this.rowAccessPolicyClient.listRowAccessPolicies(request, options);
    }
    return this.rowAccessPolicyClient.listRowAccessPolicies(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `listRowAccessPolicies`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the row access policies to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of row access policies to list.
   * @param {string} request.tableId
   *   Required. Table ID of the table to list row access policies.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response page. Leverage
   *   the page tokens to iterate through the entire collection.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRowAccessPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRowAccessPoliciesStream(
    request?: protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest,
    options?: CallOptions
  ): Transform {
    return this.rowAccessPolicyClient.listRowAccessPoliciesStream(
      request,
      options
    );
  }

  /**
   * Equivalent to `listRowAccessPolicies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.projectId
   *   Required. Project ID of the row access policies to list.
   * @param {string} request.datasetId
   *   Required. Dataset ID of row access policies to list.
   * @param {string} request.tableId
   *   Required. Table ID of the table to list row access policies.
   * @param {string} request.pageToken
   *   Page token, returned by a previous call, to request the next page of
   *   results.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response page. Leverage
   *   the page tokens to iterate through the entire collection.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/row_access_policy_service.list_row_access_policies.js</caption>
   * region_tag:bigquery_v2_generated_RowAccessPolicyService_ListRowAccessPolicies_async
   */
  listRowAccessPoliciesAsync(
    request?: protos.google.cloud.bigquery.v2.IListRowAccessPoliciesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.v2.IRowAccessPolicy> {
    return this.rowAccessPolicyClient.listRowAccessPoliciesAsync(
      request,
      options
    );
  }

  // Begin handwritten
  exampleMethod() {
    return 'BigQuery!';
  }
  // End handwritten
}
